/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StarknetInterface extends utils.Interface {
  functions: {
    "cancelL1ToL2Message(uint256,uint256,uint256[],uint256)": FunctionFragment;
    "consumeMessageFromL2(uint256,uint256[])": FunctionFragment;
    "l1ToL2MessageCancellations(bytes32)": FunctionFragment;
    "l1ToL2MessageNonce()": FunctionFragment;
    "l1ToL2Messages(bytes32)": FunctionFragment;
    "l2ToL1Messages(bytes32)": FunctionFragment;
    "messageCancellationDelay()": FunctionFragment;
    "mockConsumeMessageToL2(uint256,uint256,uint256,uint256[],uint256)": FunctionFragment;
    "mockSendMessageFromL2(uint256,uint256,uint256[])": FunctionFragment;
    "sendMessageToL2(uint256,uint256,uint256[])": FunctionFragment;
    "startL1ToL2MessageCancellation(uint256,uint256,uint256[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelL1ToL2Message"
      | "consumeMessageFromL2"
      | "l1ToL2MessageCancellations"
      | "l1ToL2MessageNonce"
      | "l1ToL2Messages"
      | "l2ToL1Messages"
      | "messageCancellationDelay"
      | "mockConsumeMessageToL2"
      | "mockSendMessageFromL2"
      | "sendMessageToL2"
      | "startL1ToL2MessageCancellation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelL1ToL2Message",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeMessageFromL2",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "l1ToL2MessageCancellations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "l1ToL2MessageNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1ToL2Messages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "l2ToL1Messages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messageCancellationDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockConsumeMessageToL2",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSendMessageFromL2",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageToL2",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "startL1ToL2MessageCancellation",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelL1ToL2Message",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeMessageFromL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ToL2MessageCancellations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ToL2MessageNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ToL2Messages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2ToL1Messages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageCancellationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockConsumeMessageToL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSendMessageFromL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageToL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startL1ToL2MessageCancellation",
    data: BytesLike
  ): Result;

  events: {
    "ConsumedMessageToL1(uint256,address,uint256[])": EventFragment;
    "ConsumedMessageToL2(address,uint256,uint256,uint256[],uint256)": EventFragment;
    "LogMessageToL1(uint256,address,uint256[])": EventFragment;
    "LogMessageToL2(address,uint256,uint256,uint256[],uint256)": EventFragment;
    "MessageToL2Canceled(address,uint256,uint256,uint256[],uint256)": EventFragment;
    "MessageToL2CancellationStarted(address,uint256,uint256,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConsumedMessageToL1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsumedMessageToL2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMessageToL1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMessageToL2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageToL2Canceled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MessageToL2CancellationStarted"
  ): EventFragment;
}

export interface ConsumedMessageToL1EventObject {
  fromAddress: BigNumber;
  toAddress: string;
  payload: BigNumber[];
}
export type ConsumedMessageToL1Event = TypedEvent<
  [BigNumber, string, BigNumber[]],
  ConsumedMessageToL1EventObject
>;

export type ConsumedMessageToL1EventFilter =
  TypedEventFilter<ConsumedMessageToL1Event>;

export interface ConsumedMessageToL2EventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
}
export type ConsumedMessageToL2Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber],
  ConsumedMessageToL2EventObject
>;

export type ConsumedMessageToL2EventFilter =
  TypedEventFilter<ConsumedMessageToL2Event>;

export interface LogMessageToL1EventObject {
  fromAddress: BigNumber;
  toAddress: string;
  payload: BigNumber[];
}
export type LogMessageToL1Event = TypedEvent<
  [BigNumber, string, BigNumber[]],
  LogMessageToL1EventObject
>;

export type LogMessageToL1EventFilter = TypedEventFilter<LogMessageToL1Event>;

export interface LogMessageToL2EventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
}
export type LogMessageToL2Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber],
  LogMessageToL2EventObject
>;

export type LogMessageToL2EventFilter = TypedEventFilter<LogMessageToL2Event>;

export interface MessageToL2CanceledEventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
}
export type MessageToL2CanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber],
  MessageToL2CanceledEventObject
>;

export type MessageToL2CanceledEventFilter =
  TypedEventFilter<MessageToL2CanceledEvent>;

export interface MessageToL2CancellationStartedEventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
}
export type MessageToL2CancellationStartedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber],
  MessageToL2CancellationStartedEventObject
>;

export type MessageToL2CancellationStartedEventFilter =
  TypedEventFilter<MessageToL2CancellationStartedEvent>;

export interface Starknet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarknetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelL1ToL2Message(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    consumeMessageFromL2(
      fromAddress: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    l1ToL2MessageCancellations(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    l1ToL2MessageNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    l1ToL2Messages(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    l2ToL1Messages(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    messageCancellationDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockConsumeMessageToL2(
      fromAddress: BigNumberish,
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mockSendMessageFromL2(
      fromAddress: BigNumberish,
      toAddress: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessageToL2(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startL1ToL2MessageCancellation(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelL1ToL2Message(
    toAddress: BigNumberish,
    selector: BigNumberish,
    payload: BigNumberish[],
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  consumeMessageFromL2(
    fromAddress: BigNumberish,
    payload: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  l1ToL2MessageCancellations(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  l1ToL2MessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

  l1ToL2Messages(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  l2ToL1Messages(
    msgHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  messageCancellationDelay(overrides?: CallOverrides): Promise<BigNumber>;

  mockConsumeMessageToL2(
    fromAddress: BigNumberish,
    toAddress: BigNumberish,
    selector: BigNumberish,
    payload: BigNumberish[],
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mockSendMessageFromL2(
    fromAddress: BigNumberish,
    toAddress: BigNumberish,
    payload: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessageToL2(
    toAddress: BigNumberish,
    selector: BigNumberish,
    payload: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startL1ToL2MessageCancellation(
    toAddress: BigNumberish,
    selector: BigNumberish,
    payload: BigNumberish[],
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelL1ToL2Message(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    consumeMessageFromL2(
      fromAddress: BigNumberish,
      payload: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    l1ToL2MessageCancellations(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1ToL2MessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    l1ToL2Messages(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2ToL1Messages(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageCancellationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    mockConsumeMessageToL2(
      fromAddress: BigNumberish,
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mockSendMessageFromL2(
      fromAddress: BigNumberish,
      toAddress: BigNumberish,
      payload: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessageToL2(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    startL1ToL2MessageCancellation(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConsumedMessageToL1(uint256,address,uint256[])"(
      fromAddress?: BigNumberish | null,
      toAddress?: string | null,
      payload?: null
    ): ConsumedMessageToL1EventFilter;
    ConsumedMessageToL1(
      fromAddress?: BigNumberish | null,
      toAddress?: string | null,
      payload?: null
    ): ConsumedMessageToL1EventFilter;

    "ConsumedMessageToL2(address,uint256,uint256,uint256[],uint256)"(
      fromAddress?: string | null,
      toAddress?: BigNumberish | null,
      selector?: BigNumberish | null,
      payload?: null,
      nonce?: null
    ): ConsumedMessageToL2EventFilter;
    ConsumedMessageToL2(
      fromAddress?: string | null,
      toAddress?: BigNumberish | null,
      selector?: BigNumberish | null,
      payload?: null,
      nonce?: null
    ): ConsumedMessageToL2EventFilter;

    "LogMessageToL1(uint256,address,uint256[])"(
      fromAddress?: BigNumberish | null,
      toAddress?: string | null,
      payload?: null
    ): LogMessageToL1EventFilter;
    LogMessageToL1(
      fromAddress?: BigNumberish | null,
      toAddress?: string | null,
      payload?: null
    ): LogMessageToL1EventFilter;

    "LogMessageToL2(address,uint256,uint256,uint256[],uint256)"(
      fromAddress?: string | null,
      toAddress?: BigNumberish | null,
      selector?: BigNumberish | null,
      payload?: null,
      nonce?: null
    ): LogMessageToL2EventFilter;
    LogMessageToL2(
      fromAddress?: string | null,
      toAddress?: BigNumberish | null,
      selector?: BigNumberish | null,
      payload?: null,
      nonce?: null
    ): LogMessageToL2EventFilter;

    "MessageToL2Canceled(address,uint256,uint256,uint256[],uint256)"(
      fromAddress?: string | null,
      toAddress?: BigNumberish | null,
      selector?: BigNumberish | null,
      payload?: null,
      nonce?: null
    ): MessageToL2CanceledEventFilter;
    MessageToL2Canceled(
      fromAddress?: string | null,
      toAddress?: BigNumberish | null,
      selector?: BigNumberish | null,
      payload?: null,
      nonce?: null
    ): MessageToL2CanceledEventFilter;

    "MessageToL2CancellationStarted(address,uint256,uint256,uint256[],uint256)"(
      fromAddress?: string | null,
      toAddress?: BigNumberish | null,
      selector?: BigNumberish | null,
      payload?: null,
      nonce?: null
    ): MessageToL2CancellationStartedEventFilter;
    MessageToL2CancellationStarted(
      fromAddress?: string | null,
      toAddress?: BigNumberish | null,
      selector?: BigNumberish | null,
      payload?: null,
      nonce?: null
    ): MessageToL2CancellationStartedEventFilter;
  };

  estimateGas: {
    cancelL1ToL2Message(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    consumeMessageFromL2(
      fromAddress: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    l1ToL2MessageCancellations(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1ToL2MessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    l1ToL2Messages(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2ToL1Messages(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageCancellationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    mockConsumeMessageToL2(
      fromAddress: BigNumberish,
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mockSendMessageFromL2(
      fromAddress: BigNumberish,
      toAddress: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessageToL2(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startL1ToL2MessageCancellation(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelL1ToL2Message(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    consumeMessageFromL2(
      fromAddress: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    l1ToL2MessageCancellations(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ToL2MessageNonce(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ToL2Messages(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2ToL1Messages(
      msgHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageCancellationDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockConsumeMessageToL2(
      fromAddress: BigNumberish,
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mockSendMessageFromL2(
      fromAddress: BigNumberish,
      toAddress: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageToL2(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startL1ToL2MessageCancellation(
      toAddress: BigNumberish,
      selector: BigNumberish,
      payload: BigNumberish[],
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
