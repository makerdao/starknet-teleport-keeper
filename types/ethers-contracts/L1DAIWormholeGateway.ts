/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type WormholeGUIDStruct = {
  sourceDomain: BytesLike;
  targetDomain: BytesLike;
  receiver: BytesLike;
  operator: BytesLike;
  amount: BigNumberish;
  nonce: BigNumberish;
  timestamp: BigNumberish;
};

export type WormholeGUIDStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  number
] & {
  sourceDomain: string;
  targetDomain: string;
  receiver: string;
  operator: string;
  amount: BigNumber;
  nonce: BigNumber;
  timestamp: number;
};

export interface L1DAIWormholeGatewayInterface extends utils.Interface {
  functions: {
    "dai()": FunctionFragment;
    "escrow()": FunctionFragment;
    "finalizeFlush(bytes32,uint256)": FunctionFragment;
    "finalizeRegisterWormhole((bytes32,bytes32,bytes32,bytes32,uint128,uint80,uint48))": FunctionFragment;
    "l2DaiWormholeGateway()": FunctionFragment;
    "starkNet()": FunctionFragment;
    "wormholeRouter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dai"
      | "escrow"
      | "finalizeFlush"
      | "finalizeRegisterWormhole"
      | "l2DaiWormholeGateway"
      | "starkNet"
      | "wormholeRouter"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "escrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeFlush",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRegisterWormhole",
    values: [WormholeGUIDStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "l2DaiWormholeGateway",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "starkNet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wormholeRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeFlush",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRegisterWormhole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2DaiWormholeGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "starkNet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wormholeRouter",
    data: BytesLike
  ): Result;

  events: {};
}

export interface L1DAIWormholeGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1DAIWormholeGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dai(overrides?: CallOverrides): Promise<[string]>;

    escrow(overrides?: CallOverrides): Promise<[string]>;

    finalizeFlush(
      targetDomain: BytesLike,
      daiToFlush: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeRegisterWormhole(
      wormhole: WormholeGUIDStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    l2DaiWormholeGateway(overrides?: CallOverrides): Promise<[BigNumber]>;

    starkNet(overrides?: CallOverrides): Promise<[string]>;

    wormholeRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  dai(overrides?: CallOverrides): Promise<string>;

  escrow(overrides?: CallOverrides): Promise<string>;

  finalizeFlush(
    targetDomain: BytesLike,
    daiToFlush: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeRegisterWormhole(
    wormhole: WormholeGUIDStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  l2DaiWormholeGateway(overrides?: CallOverrides): Promise<BigNumber>;

  starkNet(overrides?: CallOverrides): Promise<string>;

  wormholeRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    dai(overrides?: CallOverrides): Promise<string>;

    escrow(overrides?: CallOverrides): Promise<string>;

    finalizeFlush(
      targetDomain: BytesLike,
      daiToFlush: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeRegisterWormhole(
      wormhole: WormholeGUIDStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    l2DaiWormholeGateway(overrides?: CallOverrides): Promise<BigNumber>;

    starkNet(overrides?: CallOverrides): Promise<string>;

    wormholeRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    dai(overrides?: CallOverrides): Promise<BigNumber>;

    escrow(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeFlush(
      targetDomain: BytesLike,
      daiToFlush: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeRegisterWormhole(
      wormhole: WormholeGUIDStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    l2DaiWormholeGateway(overrides?: CallOverrides): Promise<BigNumber>;

    starkNet(overrides?: CallOverrides): Promise<BigNumber>;

    wormholeRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeFlush(
      targetDomain: BytesLike,
      daiToFlush: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeRegisterWormhole(
      wormhole: WormholeGUIDStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    l2DaiWormholeGateway(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    starkNet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wormholeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
